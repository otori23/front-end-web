
1) Introducing the IDB Promised Library

- when user opens Wittr, want to display latest posts recived by device before going to the network
- then make a websocket connection to start receiving new posts
- display new posts + add them to set of posts you already have stored
- finally remove entries that are to old to be worth keeping
- use a database for this

2) Advantage of a Database

- you can add and remove individual posts as needed
- iterate ofver then, and query the data
- the web platform has a database called index DB

3) Index DB (IDB)

- has a bad reputation
- IDB is similar to NoSQL systems (different from relational databases)
- supported by every major browser

3a) Shape of IDB Databases

- can have multiple databases with any given name
- generally you will only have one database per app
- that database contains multiple objects stores; one for each kind of thing you want to store

3b) Examples of object stores

- posts
- preferences
- users

3c) Object Stores (images/object_store_key.jpeg)

- contain multiple values
- e.g. JavaScript objects, strings, numbers, dataes, or arrays
- items in the object stores can have a separate primary key
- or, you can assign a property of the values to be the key
- key must be uniqe within an object store
- it becomes the way to identify a particular object

- later, get, set, add, remove, iterate over items in object stores as part of a transaction

4) Transaction

- all read/write operations in IDB must be part of a transaction
- i.e. if you create a transaction for a series of steps, and one of the actions fail, none of them are applied
- the state of the database would be as if none of the steps happened

4a) Example of Steps in a Transaction

- Add "hello:world" to "keyval" store
- Get the first value from the "people" store
- Change the persons' name to "James"
- Write it back to the "people" store

5) Indexes in Object Store (image/indexes.jpeg)

- you can also create indexes within an object store
- they provide a different view of the same data ordered by particular properites

6) Why Does IDB hava a BAD Reputation

- the API is awful
- the API forces you to create spaghetti code
- it is asynchronuous, and it pre-dates promises
- sort of has itw own event-based promise system which is confusing

6a) Note on IDB's API

- it is too clumsy, so instructore will use an abstraction library instead of IDB's API directly

7) IndexedDB Promised (https://github.com/jakearchibald/indexeddb-promised)

- an abstraction of the native IDB API
- a small library that mirrors the native IDB API
- it uses promises rather than events
- other than that, it is thesame as IDB
- so anything you learn about the library, you can apply to native IDB directly
- for the most part this also works in the reverse direction
- i.e. you can use IDB documentation to understand what the library is doing

10) Getting Started with IDB

10a) localhost:8888/idb-test/

- just a blank page with a script tag

10b) public/js/idb-test/index.js

- all it contains is an import for the idb library we will use

11) idb.open(name, version, upgradeCallback)

- create a new (or open exisiting) database

import idb from 'idb';

idb.open('test-db', 1, function(upgradeDb) {

});

11a) upgradeCallback Argument

- this function is called if the browser has not heard about this database before
- also, called if the version of the db the browser knows about is less than the version # passed in
- for database integrity this is the only place you can create and remove objectsotres and indexes

11b) upgradeDb argument to upgradCallBack

- used to define the database; i.e. the model/handle that represents the database
- api for upgradDb is in the library doc
- upgradDb really just a mirror of the native idb api; but for a few minor differences
- so can get information directly from Mozilla Developer Network (MDN)

11c) The Minor Differences

- covered in library docs
- the library docs says library db createObjectStore similat to native db's idbDatabase.createObjectStore
- so, go to MDN for full story (api) of database object 

12) Create a DataStore

import idb from 'idb';

idb.open('test-db', 1, function(upgradeDb) {
  var keyValStore = upgradeDb.createObjectStore('keyval');
});

- create the 'keyValStore' datastore
- by default datastore has keys that are separate from the data
- typically what you want
- you can inline the key and data into a single entity if you choose (see item 3c)

13) Object Store API

- the library's version of the objectstore is same as native object store
- however the library's object store returns promises
- this makes it way more usable than plain IDB

14) objectStore.put(myItem, optionalKey)

var dbPromise = idb.open('test-db', 1, function(upgradeDb) {
  var keyValStore = upgradeDb.createObjectStore('keyval');
  keyValStore.put('world', 'hello');
});

- can look up .put api on MDN
- the native IDB api returns a request object
- these request objects are what make IDB a pain to deal with
- therefore, the library version returns a promise instead
- note the input args are: (value, key) 
- NOT (key, value)

14a) dbPromise

- the library idb.open returns a promise object
- this promise resolve to the database object
- later, we can use this database object to get and set items in the database

25) Reading from DataBase - Use Transactions + dataStore.get(key)

// read "hello" in "keyval"
dbPromise.then(function(db) {
  var tx = db.transaction('keyval');
  var keyValStore = tx.objectStore('keyval');
  return keyValStore.get('hello');
}).then(function(val) {
  console.log('The value of "hello" is:', val);
});

- the code for transactions seems repetative
- however, it is possible to have a transaction that uses multiple object stores 

26) Write to Database = Use Transaction + objectStore.put

// set "foo" to be "bar" in "keyval"
dbPromise.then(function(db) {
  var tx = db.transaction('keyval', 'readwrite'); // notice 2nd parameter
  var keyValStore = tx.objectStore('keyval');
  keyValStore.put('bar', 'foo');
  return tx.complete;
}).then(function() {
  console.log('Added foo:bar to keyval');
});

- .put returns a promise
- however this promise does not necessarily signal that the put operation worked
- as we saw, if the transaction fails, all the operations that were part of the transactions are undone
- this ensures that you data is not left in some half-baked state
- either all of it happens or none of it happened

16a) Transaction.complete

- a promise that fulfills if and when the transaction completes
- and it rejects if it fails

17) Quiz: Getting Started With IDB

- working on file: public/js/idb-test/index.js
- view IDB in dev tools -> resource tab of browser: localhost:8888/idb-test/
- goal is to add a 'favoriteAnimal' key with tha value of your favoirite animal e.g. 'gorilla' in IDB
- then verify that you see it in dev tools
- note that localhost:8888/idb-test/ is just a blank page in the browser
- verify on settings page entering the code: idb-animal

17a) Steps

- to get the project into the sample state use the commands
git reset --hard
git checkout page-skeleton

- once completing the task enter the Test ID idb-animal

18) Create a new store with Object that are all of thesame kine

// The Code Below Has a Bug; It is just for illustration
var dbPromise = idb.open('test-db', 2, function(upgradeDb) {
  var keyValStore = upgradeDb.createObjectStore('keyval');
  keyValStore.put("world", "hello");
  upgradeDb.createObjectStore('people', {keyPath: 'name'});
});

- for database integrity you can only create object stores or indexes within the 'upgrade' function
- at this point the upgrad funtion is only called for version 1, of the database
- so bump the version up to 2
- then create a new object store called 'people'
- this object store will not have separate keys and values
- make the 'name' property of the objects inside the store the key
- we specify a propery of a 'person' object to be used as a key
- we are assuming names are unique for the purposes of this demo (not true in the real world)

19) Fix Bug in Code Above

- when the .open function runs again it will error out
- this is because it will try to create, the 'keyval' store again; however, it already exists
- fix this with the upgradeDb.oldVersion property

19a) updgradeDb.oldVersion

var dbPromise = idb.open('test-db', 2, function(upgradeDb) {
  switch(upgradeDb.oldVersion) {
    case 0:
      var keyValStore = upgradeDb.createObjectStore('keyval');
      keyValStore.put("world", "hello");
    case 1:
      upgradeDb.createObjectStore('people', {keyPath: 'name'});
  }
});

- tells us the version of the database that the browser already knows about
- so, use this property to get the browser to skip creating the parts of the database it alread knows about

19b) Notes on the 'switch' statement

- by design, we are not using any 'break' to end the cases of the switch statement
- that way code skip cases that contain stores that are alreadu created
- then every thing else is created

20) Add a person to the people store

dbPromise.then(function(db) {
  var tx = db.transaction('people', 'readwrite');
  var peopleStore = tx.objectStore('people');

  peopleStore.put({
    name: 'Sam Munoz',
    age: 25,
    favoriteAnimal: 'dog'
  });
  
  peopleStore.put({
    name: 'Lille Wolfe',
    age: 28,
    favoriteAnimal: 'dog'
  });

  peopleStore.put({
    name: 'Marc Stone',
    age: 39,
    favoriteAnimal: 'cat'
  });

  peopleStore.put({
    name: 'Susn Keller',
    age: 34,
    favoriteAnimal: 'cat'
  });

  return tx.complete;
}).then(function() {
  console.log('People added');
});

- note we don't specify a key to the .put function
- this is because we specified that the 'name' property of the object is the key

21) Read the People in the Store

dbPromise.then(function(db) {
  var tx = db.transaction('people', 'readwrite');
  var peopleStore = tx.objectStore('people');

  return peopleStore.getAll();
}).then(function(people) {
  console.log('People:', people);
});

- when logged on the console, notice that people are printed in alphabetical order by name
- that is because the name is the key
- what if we want to group people by their favorite animal
- this is where indexes come in

22) Indexes

...
var dbPromise = idb.open('test-db', 3, function(upgradeDb) {
  switch(upgradeDb.oldVersion) {
    case 0:
      var keyValStore = upgradeDb.createObjectStore('keyval');
      keyValStore.put("world", "hello");
    case 1:
      upgradeDb.createObjectStore('people', {keyPath: 'name'});
    case 2:
      var peopleStore = upgradeDb.transaction.objectStore('people');
      peopleStore.createIndex('animal', 'favoriteAnimal');
  }
});

...
dbPromise.then(function(db) {
  var tx = db.transaction('people', 'readwrite');
  var peopleStore = tx.objectStore('people');
  var animalIndex = peopleStore.index('animal');

  return animalIndex.getAll();
}).then(function(people) {
  console.log('People:', people);
});

- can only be created as part of a version upgrade
- i.e. in the .open function
- so, bump version #, and add to switch clause
- the index object has a very similar api to an object store
- so call .getAll on the index, instead of on the store

22a) Index API

- similar to the object store api

// can even execute queries on the index
// this just returns the cat people
return animalIndex.getAll('cat');


23) Quiz: More IDB

- edit the idb script: public/js/idbtest/index.js
- create an index on the people data store, that orders people by age
- so, in the upgrade function create the index
- then at bottom of script write code to log out all the people in that order
- when done, refresh the browser and you should see the peoples names logged out in order
- also, confirm in dev tools
- in the settings page, enter: idb-age

23a) Steps

- to get the project into the sample state use the commands
git reset --hard
git checkout task-idb-people

- once completing the task enter the Test ID idb-age

24) Database Cursor

- represents an object in the database (think iterator)
- can get the handle for a cursor from the datastore or index of the datastore
- cursors are useful for when you want to modify items as you loop through them in data store

24a) store.openCursor() or index.ppenCursor()

- returns cursor wrapped in a promise

24b) cursor.value

- the current item in the store that the cursor is pointing to

24c) cursor.continue()

- move to the next item
- returns a promise for a cursor representing the next item or 'undefined' if there isn't one

24d) !cursor

- test cursor to see if there are any items left to iterate through

24e) cursor.update(newValue)

- changes the vaule of the item

24f) cursor.delete()

- removes the item

24g) cursor.advace(2)

- skips the next two items

24h) Cursor Sample Code

- the code below kinda sets up an asynchronous loop unit the cursor is undefined

dbPromise.then(function(db) {
  var tx = db.transaction('people');
  var peopleStore = tx.objectStore('people');
  var ageIndex = peopleStore.index('age');

  return ageIndex.openCursor();
}).then(function(cursor) {
  if(!cursor) return;
  reutrn cursor.advance(2);
}).then(function logPerson(cursor) {
  if(!cursor) return;
  console.log('Cursored at:', cursor.value.name);
  // cursor.update(newValue);
  // cursor.delete();
  return cursor.continue().then(logPerson);
}).then(function() {
  console.log('Done cursoring');
});

25) git checkout -f idb-cursoring

- get the code that excersises the cursor

24) Using the IDB Cache and Display Entries

- plan is to create a database for Wittr that stores posts
- when Wittr loads via the sw, it does so without going to the network
- it fetches the page skeleton and assest straight from the cachce
- currently the application goes out to the network for posts
- we change this behaviour so that Wittr initially gets posts from the datastore and displays them
- this means we are now showing post content before going to the network
- the Wittr connects the websocket to get updated posts
- the websocket bypasses the sw and http cache
- as new posts arrive via the websocket the are displayed and added to the datastore for next time

25) Populate Databases with Posts from the WebSocket - public/js/main/IndexController.js

- in the IndexController constructor we open a ws (this._openSocket())
- in the _openSocket method there is a listener for the ws 'message' event
- the listener hands of to _onSocketMessage, passing on the data it recieved
- _onSocketMessage parses the data as json, then passes it to addPosts

25a) console.log the message in _onSocketmMessage

IndexController.prototype._onSocketMessage = function(data) {
  var messages = JSON.parse(data);
  console.log(messages)
  this._postsView.addPosts(messages);
};

- this gives you an idea of what attributes the message object has

25b) The Posts (Message) Attributes

{
  avatar: ...,
  body: ...,
  id: ...,
  name: ...,
  time: ...
}

- these are the objects we store in IDB
- the 'id' attribute is the obvious primary key
- we want to display them in date order, so create an index on the time attribute

25c) "Force Update on page load"

- have this checked on the "Sources" tab of dev tools
- makes development more efficient

26) Quiz: Using IDB Cache

- goal: add database for wittr and add posts into it
- look at file: public/js/main/IndexController.js
- in constructor a promise for the database is created: this._dbPromise = openDatabase();
- complete this openDatabase function
- it should return a promise for a database called wittr
- the database should have an object store called wittrs that uses the 'id' property as its key
- also create an index called by-date which is sorted by the time property
- the idb polyfill is already added at the top of script: import idb from 'idb'

26a) Adding Messages to the Database

- use code in public/js/idbtest/index.js as a reference

- in the _onSocketMessage method, the database is fetched
- goal: add each of the messages to the Wittr store
- we are not using the entries in the database yet; just adding entries

26b) indexedDB.deleteDatabase('wittr')

- use this statment in the console if you want to remove the database and start afresh
- once you have created database refresh browser to run the code
- remember to have: "Force update on page load"
- test on settings page using the code: "idb-store"

26a) Steps

- to get the project into the sample state use the commands
git reset --hard
git checkout task-idb-store

- once completing the task enter the Test ID idb-store

27) Quiz: Using IDB 2

- now you have wittr messages in the database
- we want to now display them
- we want to get posts that are in the database and display them ...
- before connecting to the web socket that gets us newer posts

27a) Get Messages in the Database on Screen

- look at file: public/js/main/IndexController.js
- previously we called: this._openSocket() in the construction
- however, now we call this._showCahcedMessages
- the we open the socket on after the _showCachedMessages resolves
- the goal is to fully implement _showCachedMessages function

27b) _showCachedMessages

- get messages out of database
- pass them to the method: _postsView.addPosts(messages)
- make sure they are in date decending order
- this may not be the order in which they come out of the database (e.g. use array.reverse())
- bump up cache version # in service worker so that the changes are picked up
- if everything works, post should be displayed even when you load the page offline 
- test with code 'idb-show' on settings page

27a) Steps

- to get the project into the sample state use the commands
git reset --hard
git checkout task-show-stored

- once completing the task enter the Test ID idb-show

28) Cleaning IDB

- at this point only adding things to database
- at some point you will end up with way too much stuff in the database
- the broswer will limit size of you db anyways; so, you want to just keep what you need

28a) Quiz Description

- goal: ensure that database ony has 30 witts in it at any single time
- take a look at public/js/main/IndexController.js
- in _onSocketMessage, we are already adding items into the database
- but after we add the items, we need to ensure that there are no more than 30 in the object store
- use this code as reference: public/js/idb-test/index.js
- again if you data base gets into a bad state, use the following @ the console: 
indexedDB.deleteDatabase('wittr')

- use Shift + Refresh to bypass SW when testing code until your get everything working
- then bump the version of the service worker static cache to pick up your changes
- if all works, there should be no more than 30 messages in your datastore for Wittrs
- test with code: idb-clean in the settings page

28b) Quiz: Cleaning IDB

- to get the project into the sample state use the commands
git reset --hard
git checkout task-clean-db

- once completing the task enter the Test ID idb-clean

28c) Bumping the Version of the Static Cache

- do this when you have settled on something to ship

28d) dbPromise.openCursor(null, 'prev')

- use to open a cursor that goes through an index/store backwards

29) Cache Photos

- some of the posts on wittr have photos too, and we want to cahce does also
- at the moment we are only caching resources at install time
- however, the photos appear over the lifetime of the app with the posts
- we want to cache photos as they appear
- photos could go in IDB with rest of post data
- but that means reading pixel data and coverting it into a blob... it is complicated
- you will aslo loose the ability to stream the image which is a performance hit

30) Using IndexedDB vs the Cache to Store Photos

30a) IDB

- need to get the image data out of the db as one lump
- convert the image data to the image itself
- only then can you put it on the page

30b) Cache

- can stream the image data out of the cache
- means you don't need to wait for the whole image
- you can convert the little bits of stream data into bits of the image
- then progressively build the image on the page
- DON'T need to wait for the whole image before displaying it

30c) Advantages of Using the Cache for Images

- cache api is a much better fit for the images
- more efficient and leads to more renders
- even if data is coming from the disk



31) Image HTML - It is a Responsive Image

<img src="/photos/65152-800px.jpg"
  srcset="/photos/65152-1024px.jpg 1024w,
          /photos/65152-1024px.jpg 800w,
          /photos/65152-1024px.jpg 640w,
          /photos/65152-1024px.jpg 320w"
  sizes="(min-width: 800px) 765px,
         (min-width: 600px) calc(100w - 32px),
         calc(100vw -16px">

- responsive image lets browser decide what image to load based on window width + network conditions
- when post data arrives via ws, which version of image do we cache?

31a) Which Version of Image to Cache

- post arrives
- the browser uses the data in the post to make a request for the image it chose
- this request goes through the sw before, going out on the network (i.e. HTTP cache, then Internet)
- when the sw get the response, it store the image in a cache, and also sends it to the page

31b) Image Cache

- note that the image get's its own cache (separate from static content)
- this is separate from the static cache we created at install time
- we want our images to live through different versions of the app; this is why they have thier own cache
- the static cache however, is reset on every new version of the application
- so, when sw get a request for an image that has already be cached,...
- it returns the image from the image cahce

31d) The Benefits of the Image Cache

- we will return an image from the cahce even if the browser requests a different size of the image
- this is acceptable because posts on witter are short lived
- if browser requests a bigger version of image, returning a smaller one from cache is not a huge problem
- returning a bigger image than the one the browser asks for is also fine

31c) The Static Cache

- we reset the contents of our static cache whenever we update our js or css
- the static cache reset happens on every new version of the app

32) Using the Response Object to Cache Images

- you can only use the body of a response once

32a) Error 1

response.json(); // read response as json
response.blop(); // ERROR!!!! read response as blob
event.respondWith(response); // ERROR!!!! This also uses the body of the response

- the 2nd line is an error because the response has already been consumed by the 1st line
- after 1st line executes, keeping the response data in memory would be a waste
- most if the time this behaviour is what you want
- think of if respones was a 3 GB video, you don't want all 3GB in memory
- the browser just needs what it is currently showing + some buffer material
- but this behaviour won't work for caching our photos

32b) response.clone() to the Rescue

event.respondWith(
  caches.open('').then(function(cache) {
    return fetch(request).then(function(response) {
      cache.put(request, response.clone()); // send clone to cache
      return response; // send response itself to browser
    });
  })
);

- we want to open a cache
- fetch from the network
- send the response (clone) to the cache AND the browser

33) Steps to Support Caching Photos

33a) Setup Image Cache From Service Worker

//create a new variable that specifies the name of the image cahce
var staticCacheName = 'wittr-static-v6';
var contentImgsCache = 'wittr-content-imgs';

//then create an array that stores all the names of the caches that we care about 
var allCaches = [
  staticCacheName,
  contentImgsCache
];

33b) In 'activate' Event Handler Delete all the Caches You Don't Care About

self.addEventListener('activate', function(event) {
  event.waitUntil(
    cache.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          return cacheNAme.startsWith('wittr-') &&
                 !allCaches.includes(cacheName);
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
});

33c) In the 'fetch' Event handler Properly Handle the Requests for the Photos (aka Images)

self.addEventListener('fetch', function(event) {
  var requestUrl = new URL(event.request.url)

  if (requestUrl.origin === location.origin) {
    if (requestUrl.pathname === '/') {
      event.respondWith(caches.match('/skeleton'));
      return;
    }

    if (requestUrl.pathname.startsWith('/photos/')) {
      event.respondWith(servePhoto(event.request));
      return;
    }
  }

  event.respondWith(
    caches.match(event.request).then(function(response) {
      return response || fetch(event.request);
    })
  );
});
}
  
- look for requests from the same origin that end in the path: '/photos/'
- when you see one of these, pass the request to the servePhoto function
- return whatever servePhoto returns

33d) The servePhoto Function Implementation

function servePhoto(request) {
  // sample of what a photo url looks like
  // /photos/9-8028-7527734776-e1d2bda28e-800px.jpg

  var storageUrl = request.url.replace(/-\d+px\.jpg$/, '');
}

- only want to store one copy of each photo
- photo urls have width information at the end
- e.g. /photos/9-8028-7527734776-e1d2bda28e-800px.jpg
- note the "800px" at the end
- create a new 'storage' url that does not have the size info; use regex for this
- then we will use this new 'storage' url the key for the photo in the cache

34) Quiz: Cache Photos Quiz

- the goal is to serve photos from the cache if they are there
- otherwise get them from the network, and put them in the cache for the next time
- remember to use storeage url to match and put stuff int the image cache
- so only end up with one image in the cache no matter how many sizes are requested

- remember to set the "Force update on page load" option in Sources panel of dev tools
- this way only need to reload once to see your changes
- you know things are working when you see the 'wittr-content-imgs' cache in dev tools
- the request urls in the cache will be missing the width and '.jpg' extension at the end

- you should be able to take the server offline, reload page, and still get images
- test in settings page with id: 'cache-photos'

34a) Steps

- to get the project into the sample state use the commands
git reset --hard
git checkout task-cache-photos

- once completing the task enter the Test ID cache-photos

34b) Solution

function servePhoto(request) {
  // Photo urls look like:
  // /photos/9-8028-7527734776-e1d2bda28e-800px.jpg
  // But storageUrl has the -800px.jpg bit missing.
  // Use this url to store & match the image in the cache.
  // This means you only store one copy of each photo.
  var storageUrl = request.url.replace(/-\d+px\.jpg$/, '');

  // TODO: return images from the "wittr-content-imgs" cache
  // if they're in there. Otherwise, fetch the images from
  // the network, put them into the cache, and send it back
  // to the browser.
  //
  // HINT: cache.put supports a plain url as the first parameter

  return caches.open(contentImgsCache).then(function(cache) {
    return cache.match(storageUrl).then(function(response) {
      if (response) return response;

      return fetch(request).then(function(networkResponse) {
        cache.put(storageUrl, networkResponse.clone());
        return networkResponse;
      });
    });
  });
}