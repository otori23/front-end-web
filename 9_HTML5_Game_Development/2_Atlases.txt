1) Introduction
- once we have ability to manipulate the canvas, ...
- we need to figure out how to do it the right way
- as the number of images in your environment grows, managing them (i.e. placing them on screen on the right place
at the right time becomes very difficult).
- an Atlas is an abstraction that will help you manage this complexity

2) Dirty Rectangles
- c2.com/cgi/wiki?DirtyRectangles

3) Browser Connects
- there is an upper limit on # of concurrent requests a browser can make to thesame server (domain)
- the browser sets this limit. it is browser dependent ~ 2 - 8. Say 6.
- when the limit is reached browser blocks subsequent requests until a connection becomes available

4) Texture Altasing
- takes x ms to request one 400x400 px image
- however takes 17x to ro request 10 40x40 images
- so to improve html application performance, group many small images together into one large image
- reduce # of http request
- process is know as texture atlasing

5) Atlas
- a large image that contains many smaller images
- each of the smaller images can be referenced independently

6) Atlases and Spritesheets
- technology that makes up the web is nor really new
- just old technologies with new names (i.e. just re-breand something old)
- today in the html worl spritesheets and atlases are synonymous
- but this is wrong...
- back in the day of 2D games atlases defined many sorts of charts in a single image
- spritesheet was a term reserved just for animated objects 
(i.e. particles flying around on screen or character swiping his sword)

7) GRITS
- https://github.com/fredsa/gritsgame
- the game that this course is building

8) Bin packing problem (excerpt from wiki pedia)

In the bin packing problem, objects of different volumes must be packed into a finite number of bins or containers each of volume V in a way that minimizes the number of bins used. In computational complexity theory, it is a combinatorial NP-hard problem.

There are many variations of this problem, such as 2D packing, linear packing, packing by weight, packing by cost, and so on. They have many applications, such as filling up containers, loading trucks with weight capacity constraints, creating file backups in media and technology mapping in Field-programmable gate array semiconductor chip design.

The bin packing problem can also be seen as a special case of the cutting stock problem. When the number of bins is restricted to 1 and each item is characterised by both a volume and a value, the problem of maximising the value of items that can fit in the bin is known as the knapsack problem.

9) Texture packer
- creating a texture atlas = very tricky engineering task
- texture packing problem = bin packing problem (canonical form) = NP hard
- problem is so challenging, he uses a variant as programming interview question
- GRITS uses off the shelf product called Texture Packer to create its altas
- Texture packer outputs altas for input collection of textures
- also, outputs data file that maps individual source images to their final location in the atlas
- this file is a json file

10) Parsing Texturepacker Output
- need to parse the json output of texture packer 
- Look at code in quiz of unit 7

11) JSON file format
- looks something like:

...
"chart name":
{
  "frame": {...},
  "rotated": boolean,
  "trimmed": boolean,
  "spriteSourceSize": {...},
  "sourceSize": {...}
}

"grenade_launcher_impact_0012.png":
{
  "frame": {"x":2, "y":2, "w":142, "h":140},
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": {"x":58, "y":57, "w":142, "h":140},
  "sourceSize": {"w":256, "h":256}
}

"grenade_launcher_impact_0013.png":
{
  "frame": {"x":972, "y":1314, "w":92, "h":76},
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": {"x":87, "y":93, "w":92, "h":76},
  "sourceSize": {"w":256, "h":256}
}
...

12) Parsing Texture Packer Output
- load an parse json file in order to render all sprites on the screen properly
- only concerned with two things...
- name of original loose asset before it was packed into atlas (i.e. chart name)
- data in the frame parameter

13) Frame parameter data
- x, y, are top/left corner of the chart inside of the atlas
- w, h, are size of chart in atlas
- will use these values to draw char to the canvas

14) DrawImage api
- can use drawImage to draw only a subsection of an image
- advanced version of drawImage api gives your more options
- drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)
- sx, sy, sw, sh: source x, y, w, h respectively -> attributes of image in the atlas
- dx, dy, dw, dh: destination x, y, w, h respectively -> attributes of image on the canvas
- drawImage is smart enough to scale image is sw != dw and/or sh != dh
- we won't do much scaling in the GRITS game

15) Rendering Texturepacker Output
- keep in mind no longer referencing loose files
- files, to draw on canvas, are in an atlas
- to draw an image, need to map from atlas to canvas

16) drawSprite function
- drawSprite(spritename, posX, posY)
- spritename: name of loose asset
- posX, posY: top left position of asset on the canvas

- drawSprite function needs to find were spritename exists in/on the atlas(es)
- keep in mind there could be more than one (i.e several) atlases
- var gSpriteSheets = {}; // global map of imageName -> Sprite sheet object
- mapping is created in load method of SpriteSheetClass

- want to iterate thru all the spriteSheets in gSpriteSheets
- check whether the given sprite name exists in sprites array
- sprites array is array of sprite objects; these are construncted in the defSprite method
- once the drawSprite function figures out what atlas the sprite is in, 
- it can call the __drawSpriteInternal function with the proper arguments

17) __drawSpriteInternal(spt, sheet, posX, posY)
- spt: the sprite object
- sheet: the sprite sheet object (i.e. the atlas the sprite is in)
- posX, posY: where to draw the image on the canvas
- use drawImage api to draw sprite to canvas

18) Frame Trimming
- texture packer (TP) has a trim option
- selecting the trim option will remove as much unused space as possible in the original image that was input
- so, basically texture packer will find to true boundry for each image passed to it,
- then use the trimmed version of the images to create a sprite sheet
- the unsed pixesl are mainly the transparent pixels
- when you use this option the format of the output file from TP will change a some
- previously (in the output JSON) the frame parameter w & h matched the sourceSize paramter w & h
- frame w/h i.e. size in atlas, matched the w/h in source image file "sourceSize", and parameter "trimmed" == false

...
// notice trimmed == false, and frame w/h matches sourceSize w/h
"landmine_impact_large.png":
{
  "frame": {"x":120, "y":144, "w":128, "h":128},
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": {"x":0, "y":0, "w":128, "h":128},
  "sourceSize": {"w":128, "h":128}
}

// notice trimmed == true, and frame w/h DOES not matches sourceSize w/h
"landmine_impact_small.png":
{
  "frame": {"x":852, "y":1640, "w":84, "h":84},  // w/h represents true boundry for used pixels in input texture
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": {"x":21, "y":22, "w":84, "h":84},
  "sourceSize": {"w":128, "h":128}
}
...

19) Parsing Trimmed Textures
- if images have been trimmed by TP, game logic needs to process trimmed JSON output is special way
- see file trimmed_img.jpeg
- note that, in the file above, if you want the used pixels in the trimmed image to show up in the same location
as the used pixels in the source image, the you have to do some translation in x/y location of top-left corner
of the trimmed image
- so need to refernece the timmed data against the source data to figure out what the offset is to draw the sprite in 
the correct location
- with this in mind, update parseAtlasDefinition function (in sprtesheet.js), 
- so that the sprite draws in the right location

20)  More on Trimming
- TP will only do a smart trim from egdes of an image to the center
- so if there is an images with moslty unused pixels, but some used pixels are in the top-left corner,
- then no trimming will happen
- therefore, do not need any information from sprite's frame parameter to create new cx, and cy
- if trimmed, new cx, cy is defined as
 
cx = sprite.spriteSourceSize.x - (sprite.sourceSize.w * 0.5);
cy = sprite.spriteSourceSize.y - (sprite.sourceSize.h * 0.5);

- NOT SURE difference between spriteSourceSize and sourceSize
- look at trimmed_img.jpeg and try to make sense of above calculation

21) Storytime - Web Developers and Tools
- Tools are life force of your dvelopment cycle (think your tool chain)
- start with compliers programmers use -> to art creation tools for the artists -> even notepad and text editors 
for the designers
- 30 years worth of tools exist at this point. So, high probablity of finding something already existing that you can use

22) Drawing Map
- there are the sprites the user are controlling and moving around
- there is also the environment in which the sprites are navigating; i.e. the environment map or the background
- the map data resides in one large atlas
- use drawImage to draw portions of atlas to canvas

23) Tiled
- a tool for generating background environments for game (i.e. the game map)
- with inputs, Tiled outputs a file representing the game's map
- this file contains some instruction about how the atlas should be rendered to draw the entire map 

- I guess the atlas was created by TP ???

- prior to running the game, an artist will take the atlas data for game map and use as input to Tiled tool
- output is a JSON file that will tell the game how to use the atlas to draw the map

24) Tile output
- tells us a few things,
- what atlases to load
- how the layers of the game map are organized
- game logic needs to parse the JSON properly in order to render the map

25) Loading map data
- perform Xml Http Request (XHR) to load map data into the game

- xhrGet function below just encapsulates interaction with native js XMLHttpRequest() 

function xhrGet(reqUri,callback) {
	var xhr = new XMLHttpRequest();

	xhr.open("GET", reqUri, true);
	xhr.onload = callback;

	xhr.send();
}

use this function like:

...
load: function (map) {
  xhrGet(map, function(e) { this.fullyLoaded = true; });
},
...

- the fullyLoaded flag is an indication to code external to the class that the TILEDmap class is ready to go

26) Tiled map data
- "tilewidth": tile size map expects
-  : # of vertical and horizontal tiles used
- "tilesets": what atlases the map uses
- "layers": information about defined layers for map
- layers.Object.data: very large array of interger values that represents each tile placed on the layer
- distinction made between "tile layer" and "object layer"

27) Deep Dive Into Map Data
- deeper look into data array
- each layer is a large 2D grid of tile data
- this data is listed in json file as 1D integer array
- i.e. raster scan order - 2D table rows are listed out in order in a linear array
- zero value in array means no tile in that x/y position inside of this layer
- no zero value represents a tile index for a given atlas
- remember each atlas has a ..tilesets.firstgid property
- need more information about how to interpret .tilesets.firstgid
- first nonzero entry of data array must have .tilesets.firstgid == 1 ???
- each atlas inside of the tiled file will have an increasing firstgid
- Tiled has its own herusitcs about the firstgid of each subsequent atlas that is loaded
 
28) Parsing Tiled Output
- can be complex
- steps are:

- load map json and extract properties needed to compute map w and h in pixels
w = # of X tiles * size of one X tile in px
h = # of Y tiles * size of one Y tile in px

- load all tile set data from the file 
for each tile set, 
  create a new image
  set a callback function for once it is loaded
  then set its src value to the tile sets image attribute

use a counter variable to keep track of how many images have been loaded
set fullyLoaded to true only when all images have been loaded

- Keep track of each tile set that is loaded from the map
use an array to store the newly created tileset object

- Now we need to find the image an coordinate position of a specific tile in a tile set from our data array

- draw tiles
look in json file .layers[i].data is where informations exists for tiles we want to draw
loop through each layer
for each layer loop through the tile ids contained in its data array
remember if the tile id == 0, means don't draw anything at that location
if id is not zero, use the getTilePacket method and tile id to grab the tile information
calculate position on canvas for tile
draw the tile
