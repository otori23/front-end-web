0) Inroduction
- use physics to make gmae more realistic
- add collisions

1) Pixel Perfect Collision
- say you had two objects in your game world
- object one is 72x72 [px] and object 50x50 [px]
- detecting pixel perfect collisions means you have to compare all pixels in one object
to all pixels in the other to determine if there is a collision
- so in this case you would have to do 72x72x50x50 = 12,960,001... comparisons
- very inefficient use of cpu - for just two objects mind you

- instead of computing the intersection of every pixel, in both objects, use an approximation
- approximate objects with a bounding box
- AABB - axis aligned boudning box

2) AABB collision
- only need to consider 4 values in collision calculation
- min (x, y) - i.e. top-left corner
- max (x, y) - i.e. bottom-right corner

2b) Colliding intervals
- see Sedgewick's algorithm for fidning intersecting intervals
- think it is based on tree-based symbol table 

- solution: Instead of figuring out what intersecting rectangles look like, think about what rectangles that DON'T intersect look like. The left side of A is to the right of the right side of B. OR, the right side of A is entirely to the left of the left side of B. Same logic for top and bottoms. That's all. 

function is_intersection(rect_a, rect_b):
    separate = rect_a.right < rect_b.left or
        rect_a.left > rect_b.right or
        rect_a.top > rect_b.bottom or
        rect_a.bottom < rect_b.top

    return not separate

3) Collision Location
- collision locations is represented by a rectangular area
- any point on this area can be considered point of collision
- can use any of the corners or entire area to be collision location
- whatever you want

4) Misses
- your game loop processes information in discrete time steps.
- so, it could miss a collision of objects if say these objects were on a collission course
but the game loop does not update fast enough, so the objects have moved past each other 
before the game loop has a chance to detect the collision
- can maybe use bigger bounding boxes to correct for this
- but this is not a fool proof solution; other anomalies may exist
- many, many, other anomalies may exist
- you can deal with all these things yourself ... or ...
- you may want to use a framework that sorted out all these potential issues
- enter the physics engine

5) The wish list
- what do we want from our physics engine
- crete physics objects for our game entities
- update the physics engine each frame
- respond to collision events
- poll updated position information for each physics object each frame
(can use the physics engine's calculations to feed position information into our rendering engine for drawing the next frame)

6) Box2d (http://www.box2dflash.org/docs/2.0.2/manual)
- physics engine used in GRITs
- it is open source
- originally written in c++, then ported to action script
- used in hundreds of games - including angry birds
- actionscript version has recently been ported to javascript 
- Box2d manual was written for actionscript version but the concepts translate
- to use Box2d load it in your js environment as
<script src="./box2d.min.js"></script>

7) Storytime - We Use Box2D
- Box2D is awesome library
- free to use 
- authors do ask that you give them credit if you use their work

8) The World
- write the PhysicsEngineClass -> this manages the interaction between your code and Box2D
- the core of the PhysicsEngineClass revolves around the Box2D 'World' object
- PhysicsEngineClass is composed of World object
- the core of Box2D simulation revolves around the World object

8b) World Construction
- takes as input
- a gravity vector... but since GRITS is a top/down game so no gravity vector is needed [= (0, 0)]
- a boolean which tells Box2D if an object is allowed to sleep in the World
- in GRITS we don't want to allow objects to sleep, so we set this to false
- The Box2D World object is used as the main handle for the rest Box2D api

9) Counterintuitive Physics
- update function for the World object is called step
- i.e. this.world.Step(...);

9b) World.Step parameters
- a framerate at which to update physics
-- the frame rate frequency that the physics engine uses to track its calculations
-- think of this value as the amount we want the physics engine to move the physics world forward each computational frame
-- want this value to match what the visual world update loop is doing (60 fps)
-- assume game is runnig at 60 fps
-- so we want the world update loop called 60 times a sec
-- meaning the time slice value a world "step" is 1/60 secs

- the number of velocity iterations to calculate
-- # of iterations the physics engine should spend solving collisions and velocities to esnsure proper placement

- the number of position iterations to calculate
-- same as above

9c) Solving for collisions
- can be very difficult to ensure that objects are not interpenetrating
- this is a cumbersome process that can't be solve in a single pass
- e.g. solving one interpenetration can create antother interpenetration etc, then physics engine can trying again to solve
the problem

9d) Back to # velocity / # position
- these parameters indicate the # of passes the physics engine should use to try to solve interpenetration problem
- before moving on
- probably implemented as inner loop inside of the game loop
- the higher the # the more precise the collision information
- the lower the # the less precise the collision infoormation, but less for work for cpu

9e) Clear forces
- call the 'ClearForces' method of the world object to remove any forces at every physics update
i.e. this.world.ClearForces();
- this policy is specifically for GRITS as it is a top/down game
- if you didn't clear forces, and you apply a force to an object at time step (i.e. apply a velocity)
- this object will keep moving with same velocity at the next time step, because nothing is slowing it down
- so we actually have to clear forces to get it to stop moving on the next frame

10) Physics Bodies
- Now that we have a world, our next step is to add bodies to the world
- step one, create a BodyDef object (will use this later to create the specific body)
- will set properties on BodyDef; e.g. is it dynamic (this that move and react to physics) or static (walls, trees, etc)
- use the bodydef as input to world objects create body function to actually create the body you want i.e.
var body = this.world.CreateBody(bodyDef);
- now use the FixtureDef object to set the physics properties of the physics body
- basically you are determining how the world and the object interact
- physics properties: density, friction, restitution, mass, ect 
- next step is to define the shape of the object; critical as it says alot about how this object interacts with world
- Box2D supports the shapes: polygons, circles, boxes,

- most physics engines support a suite of hull definitions 
- but they give huge performance wins to simplistics hulls. e.g., spheres, circles, boxes and cubes
- Polygons are always an option but expect to take a performance hit for this flexibility 

- FixtureDef supports a set of api methods
-- FixtureDef.SetAsBox - sets shape as a box
-- call .CreateFixture on the body object with the FixtureDef as input
-- this attaches fixture information to the body

11) Destroying Physics Bodies
- call DestroyBody method on the world object
- pass in object to destroy as a parameter
	
12) Entities and Physics
- in GRITs we will allow any entity definition to have a physics object
- entities are not required to have a physics object
- if an entity wants a physics body, it creates a handle to it and keeps the handle
- i.e. say as ivar (composition)

13) Updating Entities
- Once object is created in world, the physics engine will simulate each frame,
- updating the position and velocities of all physics body
- on each frame GRITs entities needs to query the physics bodies to get their relevant info

14) Continuous Motion
- in Box2D api SetPostion will teleport you with no regard for physics
- SetLinearVelocity of physics body instead
- remember we cleared forces at the end of every update cylce, so...
- is a body want to stay in morion it must SetLinearVelocity on every cycle

15) Game Engine Integration
- story so far ...
- we can create a physics engine (i.e. world)
- update it
- add/delete physics objects
- game entities can add their own physics bodies adn update them over time

15b) Now, need to drive simulation from game engine object
- in game engine...
- define update rate for physics engine
- initialize physics engine
- in game engine update, call physics engine update

16) Collision Handling
- physics engine updates positions/velocity of objects
- but, currently, no information/action about collision
- goal is to allow each entity to respond to a collision independent of other entities

16b) Box2D Collision callback
- Box2D funtion that allows us to define a collision callback
- input to function is two physics bodies that are touching
- so Box2D know when two objects are touching and will invoke your callback with the touching objects
- you need to regsiter your callback with Box2D 

17) Contact Listener
- Box2D exposes several events that represent different stages of collision
- BeginContact: occurs when things are touching but the collision calculation is not done yet
- EndContact: occurs when the contact analysis is over
- PostSolve: called once the phsyics collisions have occured
- will define event handlers in physics engine class

18) Entities and Collisions
- need a way to map a physics body to an entity
- physics bodies in Box2D contain a userData property
- set this property to whatever the owning enttity of the body is
- when a call back is invoked by the physics engine, 
- then the physics body can then access is owning entity
- thereby enabling game specific logic to run

19) Entities and Collisions Pt. 2
- update any entity file that create a physics body

20) Specifying the contact listener
- physics engine invokes collision handler; inputing the 2 touching bodies and impluse
- collision handler is in game engine
- game engine delegates event handlers to the entities (obtained from physics bodies)
- so each individual entity responds to collisions in their own way

21) Projectile onTouch
- the onTouch envent handler in the Projectile entity class
- this class uses a physics body therefore the implementation of onTouch
- the onTouch function checks the imput are valid (i.e. in domain)
- spawn some impact visual etc
- do flip book animation
- reduce health of an object 
- mark entity for death etc
