0) instructor

- Mike Wales
- https://www.linkedin.com/in/michaelwales

0a) Goal

- write apps that don't fail
- add new features to app without breaking anything
- instead of testing manually; refresh browser and make sure things are still working
- do it programmatically

1) Test Driven Development (TDD)

- write test for the features before writing the application itself

2) What is a Test

- each Boeing 747 has > 170 miles of wiring
- complex machines with a variety of redundant systems:
- navigation, pressurization, air quality, etc
- all these systems go through a number of tests
- however there are some tests some airplanes have never passed

3) Tests that always fail

- airplane manufacturers test how much the wings of the airplane can flex
- this simulates any turbulance the plane may experience
- they DON'T just flex the wing enough to pass the test
- they keep flexing the wing until it breaks right off
- this test always fails
- however it provides useful information about the wing

- the important thing is that they defined an expectation and then validated it
- that is all a test is...
- validate an expectation about something
- failing a test is not bad; it gives you information to build bug free apps

4) Validating an Opinion

- when a school teacher tests a student, think of it as...
- the teacher validationg the expectation that he/she taught the material sufficiently

5) Identifying Expectations

- a test is based around expections
- so you want to identify areas in your code where you are setting expectations
- this will point you to what type of test you need to run

5a) Example

function add(x, y) {
  return x + y;
}

add(2, 3);	// 5

Expectations

- the function is already defined and exists (the functions coult be in a library)
- the function is executing as intended (e.g. should not return 6)
- the function will be called with two numbers (e.g. not two strings)

- it is important to identify each of these expectations as soon as possible
- then you can start to write tests against them
- above list is not comprehensive
- as you identify more expectations, you updated your test suite

Other way to write expectations:
- Expect 2+3=5
- Expect error if non-numbers are used (this will fail its test -> two string get concatenated)
- Expect 0.1+0.2=0.3 (this will fail -> due to how computers do floating pt math)

6) Refactoring add()

- can safley refactor bacause now you have tests that tell you if you inadvertatnly broke something
- 
6a) Red/Green refactoring cycle

- green check mark next to expectation you are passing
- red check mark next to expectation you are not passing
- refactor and get all green marks

7) 1st pass at rewriting that add function

- this solution is naive because it only applies to a small set of use cases
- the value in the solution is that you want to have confidence that you can refactor your function  without breaking anything

function add(x, y) {
  var result;
  if ((typeof x && typeof y) !== 'number') { // testing error for non-numbers
    throw new Error('Params must be a number');
  }

  result = x + y;
  if (parseInt(result) !== result) { // testing 2+3 = 5
    result = parseFloat(result.toFixed(1)); // tesing 0.1 + 0.2 = 0.3
  }

  return result;
}

- the function above will have all green check marks
- now when you refactor the function, you will run test again to make sure you have all green checks
- this means the funtion behaves thesame as before

8) Writing Expectations in Code

- so far, the tests have just be done in our heads
- we want to do it in code

// Example:
// Expect add(2, 3) to equal 5
expect(add(2, 3)).toBe(5);

// Example:
// Expect add() to throw an error if x/y are not numbers
expect(add(2, 'test')).toThrow();

// Example:
// Expect add(0.1, 0.2) to equal 0.3
expect(add(0.1,0.2)).toBe(0.3);

8a) Explanation of test code

- we pass the code we want to test into the expect function
- chain a rule set fucntion called a matcher (i.e. toBe()) to whatever expect returns
- pass what you know to be the correct value to the matcher

9) Next steps

- explore the Jasmine framework
- write real world tests



 

