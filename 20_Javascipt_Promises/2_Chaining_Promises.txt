0) array

0a) array.map

- sends requests all at once; i.e. in parallel

0b) array.reduce

- create sequence/chain of promises
- this process request results in a certain order
- the way .map returns the results dictate the order to process the results

--------------------------------------------------------------------------------------

1) Quiz: Fetch And Show First Planet

1a) Instructions

- checkout the first-thumb-start branch and navigate to app/scripts/app.js
- get the planet data and add the search header
- create the first thumbnail with createPlanetThumb(data)
- handle errors!
-- pass 'unknown' to the search header
-- log the error
- checkout the first-thumb-solution branch to see my code!

1b) Anonymous vs Named Functions in Then Callbacks

- the two methods below for registering then callbacks are equivalent

Method 1
--------------------
function doSomething(arg) {
  // do something with arg
}

new Promise(function(resolve) {
  resolve("arg");
})
.then(function(arg1) {
  doSomething(arg1);
})[
--------------------

Method 2
--------------------
function doSomething(arg) {
  // do something with arg
}

new Promise(function(resolve) {
  resolve("arg");
})
.then(doSomething)
--------------------

1c) Can Add Several Catches to The Chain

getJSON('../data/earth-like-results.json')
.then(function(resp) {
  addSearchHeader(resp.query);
  return getJSON(resp.results[0]);
})
.catch(function(error) { // handle error for 1st .then
  throw Error('Search Request Error');
});
.then(createPlanetThumb)
.catch(function(error) { // handle error for every other .then that comes after 1st .catch
  addSearchHeader('unknown');
  console.log(error);
});

2) Error Handling Strategies

- so far, have use .catch to handle our errors
- but there are other ways...
- Method 1 and Method 2 below are equivalent

Method 1
---------------------
get('example.json')
.then(resloveFunc)
.catch(rejectFunc)
---------------------

Method 2
---------------------
get('example.json')
.then(resloveFunc)
.then(undefined, rejectFunc)
---------------------

2a) .then(undefined, rejectFunc) <-> .catch(rejectFunc)

- both forms are equivalent

2c) get('example.json').then(resolveFunc, rejectFunc);

- full function signature for .then
- in this form, if any previous promise is rejected, the 'rejectFunc' gets called
(so, it doesn't just have to be an error on the attached promise itself)
- if previous promise resolves, then the 'resoveFunc' is called

2d) get('example.json').then(undefined, rejectFunc).then(...);

- the 1st .then does not specify a resolve function
- so, the resolved promise will skip over the 1st .then
- it will look for a resolve function in the 2nd .then

2e) Error Logic Flow

- in all cases as soon as a promise rejects, ...
- the javascript engine skips to the next reject function in the chain
- the reject function can be in a .catch or a .then

2f) .catch Method is Recommended over 2nd Argument to .then

- more maintianable code: easier to read and write

2g) Difference In Execution Order Between .then and .catch

- can't call bothe the resolve and reject functions that are part of thesame .the
- only one or the other; or neither will get called

Method 1
---------------------
// the rejectFunc can handle errors in the promises from the get and the .then

get('example.json')
.then(resloveFunc)
.catch(rejectFunc)
---------------------


Method 2
---------------------
// the reject function handles errors only from the promise associated with the get
// an error from the promise from the .then needs to be handled by another reject
// function further down the chain

get('example.json')
.then(undefined, rejectFunc)
---------------------

2h) Resolve Does Not Necesarily Mean Success
https://jakearchibald.com/2014/resolve-not-opposite-of-reject/

- not necessarily true that passing a value to resolve means the promise succeded
- read the referenced blog post above, by jake archibald

3) Quiz: Chained Thenables

- async() and recovery() return a promise
- recovery() gets the chain back on track and continuing to resolve if something goes wrong
- what numbers will be logged if an error occurs on the lines marked below?

var urls = [];
async('example.json')		--> 13
.then(function(data) {
  urls = data.urls;		--> 13
  return async(urls[0]);
})
.then(undefined, function(e) {
  console.log(1);
  return recovery();
})
.catch(function(e) {
  console.log(2);
  return recovery();		--> if no other errors occur, this cline can't run
})
.then(function() {
  console.log(3);
  return async(urls[1]);	--> 34
})
.then(async. function(e) {
  console.log(4);
  ahhhIGiveUp();
});

4) Series vs Parallel Actions

- two main strategies for performing multiple asynchronuous actions
- synchronuous code is always in series
- asynchronuous code can be in series or in parallel

5) Array Methods and Promises

- use array methods to programmatically create long chain of promises
- there are diffrent strategies for controling the order in which promises resolve
- the corner stone of these strategies is the idea of a sequence
- i.e. a sequence of promises that are chanied on after another using .then

6) Quiz: Promises with .forEach

- grow the sequence like this:

sequence = initial value;
sequence = sequnece.then()
sequence = sequence.then().then()
etc...

- for each thumb nail url: do two actions

getJSON
createPlanetThumb

6a) Instructions

- checkout the foreach-start branch and navigate to app/scripts/app.js.
- refactor .forEach to create a sequence of Promises that always resolves in the same order it was created
-- fetch each planet's JSON from the array of URLs in the search results
-- call createPlanetThumb(data) on each planet's response data to add it to the page
- use developer tools to determine if the planets are being fetched in series or in parallel
- checkout the foreach-solution branch to see my code

6b) Solution: Resolve in Sequence

- this solution works, but all the requests happen is series
- each time through the forEach loop, 'sequence' grows by two .then's

getJSON('../data/earth-like-results.json')
    .then(function(response) {
      var sequence = Promise.resolve();
      response.results.forEach(function(url) {
        sequence = sequence.then(function(){
          return getJSON(url);
        }).then(createPlanetThumb);
      })
    .catch(function(e) {
        console.log(e);
      });
    });

6c) A Solution That Does Not Resolve in Sequence

- the thumbs are added to the DOM in some unknown order

getJSON('../data/earth-like-results.json')
    .then(function(response) {
      var sequence = Promise.resolve();
      response.results.forEach(function(url) {
        sequence.then(function(){		<-- THE ONLY DIFFERENCE IS IN THIS LINE
          return getJSON(url);
        }).then(createPlanetThumb);
      })
    .catch(function(e) {
        console.log(e);
      });
    });

7) Quiz: Promises With .Map

- use array's .map method to iterate over urls
- foreach item in array execute a function that getJSON and createPlanetThumb

7a) Instructions

- checkout the map-start branch and navigate to app/scripts/app.js
- use .map to fetch all the planets in parallel
- call .map on an array and pass it a function
- .map will execute the function against each element in the array immediately
- checkout the map-solution branch to see my code!

7b) Solution With No Ordering REquirement

getJSON('../data/earth-like-results.json').then(function(response) {
      response.results.map(function(url) {
        getJSON(url).then(createPlanetThumb);
      });
    });

7c) Solution That Still Maintains Order of Which Thumbs URL

getJSON('../data/earth-like-results.json').then(function(response) {
      var thumbPromises = response.results.map(getJSON);
      var sequence = Promise.resolve();
      thumbPromises.forEach(function(thumbPromise) {
        sequence = sequence.then(function() {
          return thumbPromise.then(createPlanetThumb);
        });    
      });
    });


8) Promise.all

Promise.all(arrayOfPromises)
.then(function(arrayOfValues) {
  ...
})

- takes an array of promises
- executes them
- return an array of values; where the values are in same order as input promises
- rejects if just one Promise rejects
- resloves after every Promise resolves

9) Quiz: All Promises

9a) Instructions

- checkout the all-start branch and navigate to app/scripts/app.js
- use Promise.all() to refactor the .map code by passing Promise.all() an array of Promises
- each Promise will be executed in parallel
- the return values will be returned in the same order as the Promises were created
- checkout the all-solution branch to see my code

9b) Solution

getJSON('../data/earth-like-results.json').then(function(response) {
      Promise.all(response.results.map(getJSON))
      .then(function(allThumbData) {
        allThumbData.forEach(createPlanetThumb);
      });
    });

10) Quiz: Bonus Question: Parallel Requests

- all getJSON requests should be parallel
- don't wait for all responses
- as soon as a response is available add it DOM
- but the responses must be added in order 
- so, it response #3 has to wait for response 1 and 2 before it can be added to DOM

10a) Solution

- request in parallel; process response in series
- fetch JSON for all our chapters at the same time, ... 
- then create a sequence to add them to the document:

getJSON('../data/earth-like-results.json').then(function(response) {
      response.results.map(getJSON)
      .reduce(function(sequence, thumbPromise) {
        // Use reduce to chain the promises together,
        // adding content to the page for each chapter
        return sequence.then(function() {
          // Wait for everything in the sequence so far,
          // then wait for this chapter to arrive.
          return thumbPromise;
        }).then(function(thumb) {
          createPlanetThumb(thumb);
        });
      }, Promise.resolve());
    });