1) Functions create their own scope
Example 1

var outsideExample = "First string";
function example() {
    var outsideExample = "Second string";
}
example();
console.log(outsideExample); // "First string"
Example 2

var outsideExample = "First string";
function example() {
    outsideExample = "Second string";
}
example();
console.log(outsideExample); // "Second string"


2) Blocks, like if-statements and any of the loops you've learned about, do not create their own scope.
var outsideExample = "First string";
if (true) {
    var outsideExample = "Second string";
    console.log(outsideExample); // Second string
}
console.log(outsideExample); // Second string

3) As you've learned in this course, there are two syntaxes to declare functions

var functionName = function() {}

and

function functionName() {}

The JavaScript interpreter, which is responsible for taking the code you write and preparing it to become machine code, will handle the two function declarations slightly differently because of the way it handles variable declarations.

All variable declarations will immediately get moved to the top of their scope. For example:

var x = 5;
console.log(x); // 5
var y = 10;
is the same as

var x, y; // (decleration) this line simply declares x and y at the same time.
x = 5; // definition
console.log(x); // 5
y = 10; // definition

Notice how the declaration of y moved to the top of the scope. And also notice how the first line doesn't set a value for neither x nor y. After var x, y; both x and y are undefined.

The same behavior holds true for other types of variables, including functions. If you use the var functionName syntax, only the function's declaration (e.g. var functionName;) gets moved at the top of its scope. However, if you use function functionName() syntax, the function declaration and definition (the actual instructions inside the function) get moved to the top of the function's scope.

4) How does JS Help my Career?

Employers value Web Developers who can also solve challenging programming problems.
JavaScript is the language of web development.
JavaScript lets you turn static web pages into dynamic applications.
Since it runs on normal web browsers, JavaScript is one of the most accessible and flexible programming languages.