0) Critical Rendering Path
- https://developers.google.com/web/fundamentals/performance/critical-rendering-path/
- steps broswers goes through to convert html/css/js into pixels on the screen
- optimize this process to make pages render faster = happy users

- need to understand how browser consumes html/css/js in rder to understand how to optimize browser performance
- i.e. the redering pipeline or CRP as he puts it

1) Summary CRP
- see crp.jpeg
- grab html and build DOM
- grab css and build CSSOM
- combine DOM and CSSOM to create render tree
- layout the page (i.e. figure out where everything goes on the page)
- then, finally, paint pixels on the actual screen
- js is an important component of performance model - will add this detail later

2) Converting HTML to the DOM
- crp well defined set of steps browser follows to turn html into the DOM
- HTML specification contians rules for how to process received data from html request
- Characters -> Tokens -> Nodes -> DOM

- DOM is a tree structure that captures the content and properties of the html and relationships between the nodes
- the browser constructs the DOM incrementally
- we can take advantage of this to speed up the rendering of our pages
- in fact, this is something the google search pages do really really well

2a) HTML -> DOM references
- check out the demo page in this example
(http://udacity-crp.herokuapp.com/cssom.html)

- what is the Document Object Model?
(http://www.w3.org/TR/DOM-Level-2-Core/introduction.html)

- how the Document Object Model is constructed
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model#document-object-model-dom)

- the HTML5 Specification
(http://www.w3.org/TR/html5/)

2b) HTML -> DOM summary 
<html><head><meta name="viewport" content="width=device-width"><link href="style.css" ...

- Characters (in html) -> Tokens -> Nodes -> DOM
- html text contained within angle brackets has special meaning and is said to be a tag
- browser has a tokenizer process/thread running
- tokenizer emits tokens as it enconters start and end tags (i.e. <> and </>)
- another process in the browser consumes these tokens and converts them to node objects

[StartTag: HTML] [StartTag: head] [Tag: meta] [Tag: link] [EndTag: head]
[StartTag: body] [StartTag: p] [Hello,] [StartTag: span] [web performance]
[EndTag: span] ...

- see dom.jpeg (top flow is for client; bottom flow is for server)

2) Fast Google Search Responses
- the browser does not have to wait for all the html to arrive before processing begins
- also, the server does not have to wait for the search results before sending html to browser on client

2a) Google search: Incremental html delivery
- when you send a seatch request to google, the server does something really clever
- before server knows what the search results are, it sends back the header of the (response) page
- header is thesame for all users
- this allows the client browser to processing response and begin constructing the DOM incrementally
- the browser can even render the header
- when the search results are ready, the rest of the html arrives
- browser use this html to update the DOM -> then render it too

- see incrementalHtml.jpeg
- see httpWaterFallChart.jpeg (how to read???)

2b) Other Resouces
- see Flushing the Document Early to learn more.
(http://www.stevesouders.com/blog/2009/05/18/flushing-the-document-early/)

- also, check out Chunk Scatter, a fantastic tool for visualizing chunked HTTP responses.
- may explain how to read Timeline charts in developer tools
(http://blog.cowchimp.com/chunk-scatter-http-chunked-response-analysis-tool/)

2c) How Google developers measure and optimize the performance of their pages
- chrome developer tools and mobile debuging

3) Exploring Timeline Traces
- Timeline in developer tools is giving us a low level view of what the browser is doing as it builds a page
- can record a trace on the timeline for requests from and responses to browser
- see the "Records" portion of the Timeline
- this pane shows each step in CRP
- many different events shown on Timeline; can be overwhelming at first

3a) To learn more about the Timeline panel in Chrome Developer Tools
- Performance profiling with the Timeline
(https://developer.chrome.com/devtools/docs/timeline)

- Timeline event reference
(https://developer.chrome.com/devtools/docs/timeline#timeline-event-reference)

3b) CNN's Timeline Trace
- Ctrl+Shift+I: open the DevTools.
- Ctrl+Shift+R: reload the page and capture the timeline.
- use drawer icon in developer tools tool bar to open window with [Console, Search, Emulation, Rendering] options
- ESC key works too to toogle show/hide 
- in Emulation tab, can select a device to emulate
- can use 'dock' icon to rearrange screen (i.e. device on left; dev tools on right)
- can drill into more details of Records (i.e. request/response events) by selecting a particular record
- can filter events

4) Converting CSS to the CSSOM
- DOM capture content of page, but...
- need a description of HOW to display the page
- Enter the CSS objeject model
- CSS has its own specification on valid tokens
- CSSOM is built by browser much in same way as the DOM
- Characters (in css) -> Tokens -> Nodes -> DOM

4a) Sample CSS
body { gond-size: 16px} p {font-weight: bold} span {color: read}
p span {display: none} img {float: right}

- see cssom.jpeg

4b) CSSOM
- note data in CSSOM, p span an dimg are children of body
- this is because all visible content are childern of body, according to CSS specitication
- also, note, p span, indicates a span node is added as a child of the p node
- a CSSOM node inherits the styling rules off all its ancestors
- see cssom.jpeg
- similar to, but no same as DOM construction because CSS rules cascade down

4c) Inctemental processing
- for html, the browser does not need to have the whole DOM tree constructed before it starts rendering the page
- HOWEVER, for css the browser needs the entire CSSOM constructed before it can use teh CSSOM
- no partial css tree

4d) Partial CSS tree
- css allows user to redefine style prperties of elements, e.g.

p { ... }
...
p { ... }

- so, a partial css dom tree would not include the overriden style for p in the snippet above
- you would end up using the wrong style
- browser BLOcKS rendering until it receives and processes all of the css

- see cssom_partial.jpeg 

- CSS IS RENDER BLOCKING

4e) CSSOM references
- Learn more about how CSS Object Model is constructed
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model#css-object-model-cssom)

- Learn more about why and how CSS blocks rendering
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css)

5) Which style is faster to evaluate
- The more general selector is actually easier to evaluate.
- the more specific rul is more expensive because browser has to traverse more nodes in CSS DOM tree
- more specific css rules probably not your performance bottle neck
- HOWEVER, measure first, then optimize later

- see faster.jpeg

6) Recalculating CSS Styles in DevTools
- can save a Timeline trace
- right click on trace and select save
- can also load trace in a similar way

6a) Examine css events in trace
- can see the 1st css request going out; part of 1st parse HTML (see request for style.css)
- happens after 1st chunk of html is recieved
- this is where browser found link tag and initiated http request for style.css
- wait to get css bytes...
- then later see the Recalculate style event
- this is where we convert the css response into the css object model
- look at summary panel to see how long it took to complete this step
- before you re-write all you css rules; measure this time and see how long building 
your cssom takes
- i.e. measure 1st, then optimize if needed

7) The Render Tree
- captures both the page content and the styles
- it is a combination of the information in the HTML dom and the CSS dom
- html dom: contents; css dom: styles
- captures only visible content 
- non-visible content does not make its way into the render tree
- remember css properties of nodes in css dom, CASCADE DOWN
- demo page: http://udacity-crp.herokuapp.com/cssom.html

7a) How to build - see renderTree.jpeg

- start with root of html dom and check css dom for a matching rule
- in class example, p node at html dom root matches p tag at css dom root
- css proerty  {font-size: 16 px, font-weight: bold }
- next html dom node to consider is the Hello node
- this is just a text node, so it gets copied over to render tree
- next is span node; has display property none, so NOT copied to render tree
- also skip adding all the children of this span node; because css properties CASCADE DOWN
- i.e. web performance text node also has css property {display: none}
- finaly copy over student text node from html dom to render tree
- resulting render tree captures content and style

7b) Generalized html/css dom -> render tree - see renderTree2.jpeg

- html and head nodes don't have visual representation so the are not copied to dom tree
- start with body and copy all decendants that have a visual representation into render tree
- also, copy their styles

7c) Which screen elements are visible?
- see visible.jpg
- as you build render tree, i.e. get rid of html, head, meta ...
- the 1st rule, div { color: red } applies to the div and its child p; so text Hello will be red
- the 2nd rule, p { color: black } applies to all p nodes regardless of parent
- so now Hello will be black; also world will be black
- the 3rd rule, div p {display: none} allows use to prune the div -> p -> Hello nodes from render tree

7c) Render tree reference
https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction


8) Layout - see layout.jpeg

- browser still needs to figure out where and how all the elements are positioned on the page
- note because the width properties are defined as [%], when the screen resizes,
- the size of teh boxes change, but their relative proportions stay the same

8a) How does browser consume render tree to geenrate layout
- in layout.jpeg, start at top with body node
- width= 100 % means, body node should take up 100 % of view port size
- there is a meta tag on the example page
- think of viewport as the canvas on which the browser is painting content to

8b) <meta name="viewport" content="width=device-width">
- telling browser that width of view port should be equal to the device width
- i.e. viewport is the canvas on which the browser is painting content to
- if device width = 320 px then viewport = 320 px
- if you dont provide this meta tag, browser will use default viewport size of 980 px
- this is optimized for large screens
- in example: body = 320 px
- div is a child of body so its width = 160 px
- similarly p = 80 px


8c) random note about widths
- <em> and <span> are inline elements 
- unless they are converted to display: block or display: inline-block, 
- their widths will be determined by the text they contain

8d) references
- learn more about render-tree construction, layout, and paint
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)

- learn more about layout viewport and the basics of responsive web design
(https://developers.google.com/web/fundamentals/layouts/rwd-fundamentals/)


9) Analyzing Layout in DevTools
- browser has to re-reun layout step when dimensions of layout viewport changes
- i.e. rotate your phone, resize browser
- so expect to see a separate Layout entries in Records of Timeline chart;
- can a layout be a bottleneck for performance -- YES
- how to optimize # of Layout events?
- batch you update requests

9a) Triggering Layouts
- note: layout can be triggered by device orientation change on mobile, 
- a window resize, 
- or any other action that modifies the content of the DOM - e.g. 
- adding or removing content from the DOM tree, toggling CSSOM properties on a node, and so on!

10) Time to Paint the Page!
- after layying out the page, the next step for browser is to paint the pixels
- the simpler styles are easier on the browser, i.e., faster to paint
- some pixels are more expensive to paint than others; depends on effects you are applying
- i.e. transparency, shadows, etc

10a) NY times example
- http://mobile.nytimes.com/
- in Timeline trace, filter Records for Paint events
- can select time range of interest
- detail view at bottom shows pie chart dissecting time used up by each step browser takes to create page
- this pie chart update dynamically as you select time intervals

11)  Summarize the CRP

<!DOCTYPE HTML>

<head>
  <link rel="stylesheet" href="css/style.css" type="text/css"></link>
  <script src="js/app.js"></script>
</head>

<body>
...
</body>

- What are steps to render?

i) Begin constructing the DOM by parsing HTML
<<REMEMBER: DOM construction can be incremental; response does not arrive all at once>>

ii) Request CSS & JS resources
<<REMEMBER: request for CSS is synchronous; i.e. need all CSS before we can do anything with it>>

iii) Parse CSS and construct CSSOM tree
<<CANNOT execute JS until CSSOM is constructed; once constructed JS engine is unblocked>>

iv) Execute JS
<<Executed when JS engine is unblocked by creation of CSSOM; JS script is executed immediately>>

v) Merge DOM and CSSOM into the Render Tree
<<Once JS has finished executing, browser can go back to finish DOM creation, then create render tree>>

vi) Run layout, paint  


12) Analyzing the Entire CRP in DevTools
- you can't optimize what you can't measure
- if css is inline. you won't see any request for css files in Timeline trace
- Recalculate style events: browwer builds render tree and computes all the styles for visible content

12a) http://udacity-crp.herokuapp.com/cssom-inline.html
- inline css, some text and an image
- end -to- end view of CRP
- Send Request event: initial request
- Receive Response event: response headers
- Receive Data event: response data
- Finish Loading event: browser has the entire html response data bytes
- Parse HTML event: browser is building html/css DOMs
- while building dom, browser may generate addition requests of resources in the html file
- Parse HTML -> Recalcuate style: building render tree
- Layout event: compute location and size of render tree elements
- Paint event: render/draw page on screen 

13) CRP Wrap Up
- now that you know the crp next step is to use this knowledge to find opportunities for optimization


HOW TO RENDER FASTER
- use partial HTML DOM
- use more general css rules - actually, DOES NOT impact performance that much
- minimize layout events by batching update requests
- minimize effects you try to acheive - i.e. tnasparency, shadows, etc

- RULE: measure then optimize


NOTES/INVESTIGATE
- How to take Timeline traces in chrome developer tools
- Understand rules on how the CSSOM is built; see references in (4e)