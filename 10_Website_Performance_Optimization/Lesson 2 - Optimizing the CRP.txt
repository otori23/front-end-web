0) Resources

- Learn more about resource minification
(https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer#minification-preprocessing--context-specific-optimizations)

- Learn more about text compression with GZip
(https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer#text-compression-with-gzip)

- Learn more about HTTP caching
(https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching)

1) DOM & CSSOM
- these steps are typically the worst offenders
- they are what really makes you browser renpder a page slowly

1a) How to make faster
- server sends html to client as quickly as possible
- small file sizes for html

1b) Steps
- Minify: use minification to remove extra white space and comments
- Compress: 
- Cached: by browser

2) Unblocking CSS - Why wait on styles you don't need
- to optimize cssom construction
- remove unneccessary styles, minify, compress, cache
- also need to consider render blocking css
- remember the browser needs to get all the page's css and build the cssom before building render tree
- you don't want to paint an unstyled page, thus the render blocking css

2a) More resources
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css)

3) Unblocking CSS with Media Queries

- CSS allows us to scope styles to particular conditions

<link href="style.css" rel="stylesheet">

body { font-size: 16px } // Always applies

@media screen and (orientation: landscape) { // In Landscape: float menu to the right
  .menu { float: right }
}

@media print { // On print of page: resize body to use smaller font size
  body {font-size: 12px }
}

- media queries are important for responsive web design, but...
- how do they help with optimizing crp (unblocking css)

3a) How media queries help with optimizing css?
- say a browser is rendering a page using the css above 
- ordinarily, browser blocks rendering until it parses all the styles
- should browser block rendering on print rule?
- if you are not printing, then probably not
- so, it makes sensce to split your css into mulitple files - based on conditions need to apply rule in file
- so, now linking to two files in html

<link rel="stylesheet" href="style.css">
<link rel="stylesheet" href="style-print.css">

- by default the browser assumes that each style sheet is render blocking
- however, can tell the browser when the style sheet should be applied by using the "media" attribute on the link tag

<link rel="stylesheet" href="style-print.css" media="print">

- when the browser sees this style sheet, it knows that it only needs to apply it for printing
- so don't block rendering when loading on the phone
- browser still downloads both style sheets, but rendering is not blocked on style-print.css

3b) See Resource for more details
- Render blocking CSS
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css)

- Responsive web design
(https://developers.google.com/web/fundamentals/layouts/rwd-fundamentals/)

3c) PageSpeed Insights
- related reccomendation say: reduce number of critical css files critical

3d) Render Blocking Quiz: which style sheets are render blocking on phone
- see renderBlockingCSS.jpeg

4) JavaScript and the CRP - Optimizing JS
- still want to minify, compress, and cache
- PageSpeed Insights may still complain about parser blocking scripts

4a) Parser blocking scripts - meaning and how to optimize
- folder, hello_world contains sample web pabe with inline js
- the js in the sample page manipulates the DOM and CSSOM
- can do more to optimize this js
- but optimizing js can be itw own course
- in this exaample can optimize how the code is included on the page
 
5) Quiz: How will the text be rendered?

<p>
  Awesome page
  <script>
    document.write(" with JavaScript ");
  </script>
  is awesome
</p>

- first document parser creates a p node and adds a text fragment
- then it encounters the script tag, 
- at which point it pauses DOM construction
- waits for js enginge to execute the script
- script appends with js " with JavaScript ", then exits
- now, resume DOM construction
- document parser appends "is awesome"

Final Result: Awesome page with JavaScript is awesome

5a) Document.write()
Writes a string of text to a document stream opened by document.open().

Note: as document.write writes to the document stream, 
calling document.write on a closed (loaded) document automatically calls document.open 
which will clear the document.

6)  External JavaScript Dependencies - how js affects performance
- note sequence of steps
- when script tag was encountered, 
- had to pause DOM construction and let js run before we could continue
- DOM -> JS -> DOM

- We say, js is PARSER BLOCKING: i.e. DOM construciton is parsed when script tag is encountered

6a) External JS files

- say we had this instead:

<p>
  Awesome page
  <script src="write.js"></script>
  is awesome
</p>

write.js:

document.write(" with JavaScript ");

- when parser sees script tag, it has to go fetch the file from its remote location
- this fetch could take a while,
- and the browser is blocked and can't continue DOM construction
- in turn, this slows down the CRP

- So inlining is always quicker
- but may want to use external files for shared js

6b) Resources
Adding Interactivity with JavaScript 
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript)

7) More on JavaScript Dependencies

- how does parser handle the documnet below

<style src="style.css" />   // -> p { color: black }
<p>
  Awesome page
  <script>
    var e = document.getElementsByTagName("p")[0];
    e.style.color = "red";
  </script>
  is awesome
</p>

- note, the css says color all p text as black
- js says, color the 1st p text as red

7a) How browser processes - see process.jpeg

- browser requests html
- as soon as it gets the response
- it starts building the DOM
- discovers css and sends a request for it
- parser continues and finds script tag
- at this point, the praser has to block... why?
- parser does not know what script will do
- script may want to access css properties
- so, script execution is blocked until css arrives and cssom is built
- then js runs
- and parser finishes building the DOM

7b) CSS is bottle neck
- css blocks rendering and js execution
- can inline CSS so that js and dom creation is blocked on request for css
- OPTIMIZING CSS IS SO IMPORTANT

7c) Resources
https://developers.google.com/web/fundamentals/performance/critical-rendering-path/

8) Async Javascript
- some scripts DO NOT modify the DOM or CSSOM (e.g. analytics) 
- so, they should not block rendering
- how do we flag these types of scripts to the browser

8a) window.onload
- one strategy: load the script after the page is loaded
- so, when browser fires onload event, you execute the script then

8b) use async attribute on script tag 
- tells browser not to block DOM construction when browser encounters script tag
- i.e. 
<head>
  ...
  <script src="analytics.js" async></script>
</head>

- also, browser does not block on CSSOM construction; 
- i.e. if CSSOM is NOT ready, script still runs

8c) async attribute
- js does not block CRP

8d) inline scripts
- will always block on the CSSOM
- with one exception
- if you put your inline js above the css
- then this js will execute without

8e) Resources
- learn more about window.onload event on Mozilla Developer Network
(https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload)

- learn more about parser blocking vs. asynchronous JavaScript  
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript#parser-blocking-vs-asynchronous-javascript)

9) JavaScript approaches
- Blocking: <script src="anExteralScript.js"></script>
- Inline: <script>document.write("this is an inline script")</script>
- Async: <script async src="anExternalScript.js"></script>


10) General Strategies
- there seem to be many performace rules, how do I keep them straight?
- 3 general categories/clarification

10a) Categories/Bucket
- minimize the # bytes you send down the wire (a below)

- reduce # of critical resources i.e. css and js files; css for printing or js for analytics should not block rendering or 
blocking (b and c below)
- shorten crp length

10b) Minify, Compress, Cache
- HTML, CSS, Javascript

10c) Minimize use of render blocking resources (CSS)
- use media queries on <link> to unblock rendering 
- Inline CSS: no need for separate request

10d) Minimize use of parser blocking resources (JS)
- defer js execution 
- use async attribute on <script>
- Inline JS: no need for separate request

11) crp_flow_1.jpeg
- what does it mean to - shorten crp length?
- title figure
- CRP resources: 1
- CRP KB: 5
- CRP length: 1 (# of roundtrips?) 

11a) PageSpeed Insights and file size
- PS insigths may copmplain about file size
- if file size is too big, then need more roundtrips to get file
- will increase length of crp

12) crp_flow_2.jpeg
- browser sends initial request
- response arrives
- DOM creation starts
- discover css
- make a request for css
- halt DOM creation
- get css response
- build CSSOM
- now finish building DOM

- The page render can happen

- see crp_metrics_1.jpeg

13) CRP Metrics Discussion
- no one golden rule; use the three categories as benchmark
- reduce # of critical resources will reduce the number of bytes
- compress, minify, caching will also reduce the number of bytes

13a) Page with css and js - crp_flow_3.jpeg
- Analyze the crp
- number of critical resources: 3 (html, css, and js)
- total critical KB: 11 KB
- minimum critical path length (round trips): 2 (1 html + css and js files are downloaded in parallel)
- approximate time to first render: if connection is 1 sec/reound trip
- then 2 secs for page to load

13b) Optimization strategies for crp_flow_3.jpeg
- inline css and js: no need for separate requests
- if you know the contents of css and js consider using media/asyn attributes on link/script tags

13c) What would you look for in css and js files???
- css: make sure the styles are actually required to render the page
- css: if sytles are not being used, add media attribute to unblock rendering

- js: if script is not manipulating DOM or CSSOM
- js: add async attribute to unblock parsing; i.e. DOM construction  
- js: with async tag, js file is no longer a critical resource

13d) What is a Critical Resources
- CRITICAL resources, BLOCK the CRP
- so, img is NOT a critical resource
- async js is NOT a critical resource
- css that does not pass media query is NOT a critical resource

14) The Preload Scanner - preload.jpeg
- in preload.js, note that timing.js is not requested until after parser blocking app.js has finished running
- the request for timing.js may take a while to complete, AND...
- timing.js itself is parser blocking

14a) Pre-load timing.js
- browser has special process called the perload scanner
- preload scanner peaks ahead in the document to discover CRITICAL resources and requests them while parser is blocked
- can "preload" timing.js while parser was initially blocked on getting style.css and app.js

14b) Resources
To learn more about the preload scanner, check out "How the Browser Pre-loader Makes Pages Load Faster".
(http://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/) 

15)  Draw a CRP Diagram - Easy
- CRP analysis gives you a good estimate of how ling it will take the page to render
- CRP diagram allows you to identify bottlenecks
- with some practice can visually inspect html and figure out what CRP is

15a) Quiz
- draw CRP and add metrics (# critical resources, # of critical bytes, critical path length)
- post result in forums: http://discussions.udacity.com/#ud884

16) Summary - Optimizing CRP
- reduce # of critical bytes
- reduce # of critical resources
- reduce critical path length

- basically makle the critical path length as small and as short as possible

16a) The Final Project Overview
- run your page through pagespeed insights to get recommendations on what to optimize
- use what you have learned to implement pagespeed insights recommmendations

- GitHub repo: https://github.com/udacity/frontend-nanodegree-mobile-portfolio
- Cameron's profile: http://cameronwp.github.io/udportfolio/

- see Final_Project.jpeg









Resources on General Strategies
- learn more about optimizing the Critical Rendering Path
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/optimizing-critical-rendering-path)

- review the Critical Rendering Path performance patterns
(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp#performance-patterns)

- check out the PageSpeed mobile analysis documentation on guidance for how to deliver a page that can be rendered in one second or less. 
(https://developers.google.com/speed/docs/insights/mobile)

- to learn more about TCP Slow Start, check out Ilya's book, High Performance Browser Networking.
(http://chimera.labs.oreilly.com/books/1230000000545)

QUESTIONS
what about getting images? <img src="......" />, does this not trigger a request?