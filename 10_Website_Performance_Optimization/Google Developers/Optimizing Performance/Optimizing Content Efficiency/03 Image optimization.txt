Image optimization

Image optimization is both an art and science: an art because there is no one definitive answer for how best to compress an individual image, and a science because there are many well developed techniques and algorithms that can significantly reduce the size of an image. Finding the optimal settings for your image requires careful analysis along many dimensions: format capabilities, content of encoded data, quality, pixel dimensions, and more.

Compression Technique

Find large # of bits (neighbours) that repeat (value); then encode them with a smaller # of bits (key).
can later decode by using the key/value pair to do a lookup in a dictionary

I) Eliminating and replacing images

TL;DR
Eliminate unnecessary image resources 
Leverage CSS3 effects where possible
Use web fonts instead of encoding text in images



II) Vector vs. Raster images

TL;DR
Vector images are ideal for images that consist of geometric shapes
Vector images are zoom and resolution-independent
Raster images should be used for complex scenes with lots of irregular shapes and details

1) Vector graphics 
- use lines, points, and polygons to represent an image.

- based on SVG technology

- Each format has its own set of pros and cons. Vector formats are ideally suited for images that consist of simple geometric shapes (e.g. logos, text, icons, and so on), and deliver sharp results at every resolution and zoom setting, which makes them an ideal format for high-resolution screens and assets that need to be displayed at varying sizes.

2) Raster graphics 
- represent an image by encoding the individual values of each pixel within a rectangular grid.

- however, vector formats fall short when the scene is complicated (e.g. a photo): the amount of SVG markup to describe all the shapes can be prohibitively high and the output may still not look “photorealistic”. When that’s the case, that’s when you should be using a raster image format such as GIF, PNG, JPEG, or one of the newer formats such as JPEG-XR and WebP.

- raster images do not have the same nice properties of being resolution or zoom independent - when you scale up a raster image you’ll see jagged and blurry graphics. As a result, you may need to save multiple versions of a raster image at various resolutions to deliver the optimal experience to your users.

III) Implications of high-resolution screens

TL;DR
High resolution screens have multiple device pixels per CSS pixel
High resolution images require significantly higher number of pixels and bytes
Image optimization techniques are the same regardless of resolution

1) Vector images
- A high resolution image just cost more time to process

2) Raster images
- a high resolution image increases # of bytes of resources O(n^2)
- if a raster image is required, deliver and optimize multiple variants of each image

So, what does this mean in practice? High resolution screens enable us to deliver beautiful images, which can be a great product feature. However, high resolution screens also require high-resolution images: prefer vector images whenever possible as they are resolution independent and always deliver sharp results, and if a raster image is required, deliver and optimize multiple variants of each image - keep reading for further details



III) Optimizing vector images

TL;DR
SVG is an XML-based image format
SVG files should be minified to reduce their size
SVG files should be compressed with GZIP

1) SVG minification tool
https://github.com/svg/svgo

- make sure your server is configured to compress SVG assets!



IV) Optimizing raster images

TL;DR
A raster image is a grid of pixels
Each pixel encodes color and transparency information
Image compressors use a variety of techniques to reduce the number of required bits per pixel to reduce file size of the image

1) Pixels memory usage
- one pixel of a raster image consumes 4 bytes
- i.e. one byte per channel for RGBA channels
- so, each channel has 256 (2^8) "shades"

2) How to compress raster image

2a) Optimize data usage of each pixel
- reduce the number of bits used to represent each channel
- i.e. instead of 8 bits maybe use 4, or 2 bits
- smaller size for image but can represent as many colors
- may not matter because human eyes not so good at detecting diferences in shades of a color

2b) Compress 
- after oprimizing data usage of each pixel,
- use a tecnique like delta encoding to compress the image data (http://en.wikipedia.org/wiki/Delta_encoding)

2c) Delta Encoding
Next, once we’ve optimized the data stored in individual pixels we could get more clever and look at nearby pixels as well: turns out, many images, and especially photos, have many nearby pixels with similar colors - e.g. the sky, repeating textures, and so on. Using this information to our advantage the compressor can apply “delta encoding” where instead of storing the individual values for each pixel, we can store the difference between nearby pixels: if the adjacent pixels are the same, then the delta is “zero” and we only need to store a single bit! But why stop there…

2d) Optimize Delta Encoding
The human eye has different level of sensitivity to different colors: we can optimize our color encoding to account for this by reducing or increasing the palette for those colors. “Nearby” pixels form a two dimensional grid, which means that each pixel has multiple neighbors: we can use this fact to further improve delta encoding. Instead of looking at just the immediate neighbors for each pixel, we can look at larger blocks of nearby pixels and encode different blocks with different settings. And so on… 

3) Decoding and using image on Client/Browser

As an aside, regardless of the image format used to transfer the data from the server to the client, when the image is decoded by the browser, each pixel always occupies 4 bytes of memory. This can be an important constraint for large images and devices which do not have a lot of available memory - e.g. low-end mobile devices.

V) Lossless vs lossy image compression

TL;DR
Due to how our eyes work, images are great candidates for lossy compression
Image optimization is a function of lossy and lossless compression
Differences in image formats are due to the difference in how and which lossy and lossless algorithms are used to optimize the image
There is no single best format or "quality setting" for all images: each combination of particular compressor and image contents produce a unique output

1) A typical image optimization pipeline consists of two high level steps:
- Image is processed with a “lossy” filter that eliminates some pixel data
- Image is processed with a “lossless” filter that compresses the pixel data

The first step is optional (depends on if you are willing to lose some information), and the exact algorithm will depend on the particular image format, but it is important to understand that any image can undergo a lossy compression step to reduce its size.


2) Certain content types lend themselves to lossly compression: images, audio, video
- others have to be compressed in a lossless fashion as not to change their meaning:
text, executables, etc

3) Image formats
- e.g. JPEG, GIF, PNG, WebP, etc
- differ in the type of comperssion algorithm that is used on them

4) The compression algorithm determines the type format for an image




VI) Selecting the right image format

TL;DR
Start by selecting the right universal format: GIF, PNG, JPEG
Experiment and select the best settings for each format: quality, palette size, etc.
Consider adding WebP and JPEG XR assets for modern clients

1) Choice of the “right format” for a particular image is a combination of desired visual results and functional requirements (e.g. transparency, animation)

2) There are three universally supported image formats: GIF, PNG, and JPEG. In addition to these formats, some browsers also support newer formats such as WebP and JPEG XR, which offer better overall compression and more features. 

3) Other more current formats not universally supported, but give better performance
e.g. WebP and JPEG XR

4) Once you’ve determined the optimal image format and its settings for each of your assets, consider adding an additional variant encoded in WebP and JPEG XR.

5) Finally, note that if you are using a Webview to render content in your native application, then you have full control of the client and can use WebP exclusively! Facebook, Google+ and many others use WebP to deliver all of their images within their applications




VII) Tools and parameter tuning

There is no one perfect image format, tool, or a set of optimization parameters that apply to all images. For best results you will have to pick the format and its settings depending on the contents of the image, and its visual and other technical requirements.

Tool			Description
gifsicle 		create and optimize GIF images
http://www.lcdf.org/gifsicle/

jpegtran		optimize JPEG images
http://jpegclub.org/jpegtran/

optipng			lossless PNG optimization
http://optipng.sourceforge.net/

pngquant		lossy PNG optimization
https://pngquant.org/

Don’t be afraid to experiment with parameters of each compressor. Dial down the quality, see how it looks, then rinse, lather and repeat. Once you’ve found a good set of settings, you can apply them to other similar images on your site, but don’t assume that all images must be compressed with the same settings.




VIII) Delivering scaled image assets

TL;DR
Delivering scaled assets is one of the simplest and most effective optimizations
Pay close attention to large assets as they result in high overhead
Reduce the number of unnecessary pixels by scaling your images to their display size

Image optimization boils down to two criteria: optimizing the number of bytes used to encode each image pixel, and optimizing the total number of pixels: the filesize of the image is simply the total number of pixels times the number of bytes used to encode each pixel. Nothing more, nothing less.

As a result, one of the simplest and most effective image optimization techniques is to ensure that we are not shipping any more pixels than needed to display the asset at its intended size in the browser. Sounds simple, right? Unfortunately, most pages fail this test for many of their image assets: typically, they ship larger assets and rely on the browser to rescale them - which also consumes extra CPU resources - and display them at a lower resolution.

Note: hovering over the image element in Chrome DevTools reveals both the "natural" and "display" sizes of the image asset.

The overhead of shipping unnecessary pixels, only to have the browser rescale the image on our behalf, is a big missed opportunity to reduce and optimize the total number of bytes required to render the page. Further, note that resizing is not simply a function of the number of pixels by which the image is reduced by, but also of its natural size.




IX) Image optimization checklist

- Prefer vector formats
- Minify and compress SVG assets
- Pick best raster image format
- Experiment with optimal quality settings for raster formats
- Remove unnecessary image metadata
- Serve scaled images
- Automate, automate, automate