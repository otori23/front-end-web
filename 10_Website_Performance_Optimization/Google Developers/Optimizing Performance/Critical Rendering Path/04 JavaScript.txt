TL;DR
- JavaScript can query and modify DOM and CSSOM.
- JavaScript execution blocks on CSSOM, unless async attribute specified.
- JavaScript blocks DOM construction unless explicitly declared as async.

1) JavaScript

JavaScript allows us to modify just about every aspect of the page: content, styling, and its behavior to user interactions. However, JavaScript can also block DOM construction and delay when the page is rendered. Make your JavaScript async and eliminate any unnecessary JavaScript from the critical rendering path to deliver optimal performance.

In short, JavaScript introduces a lot of new dependencies between the DOM, CSSOM, and JavaScript execution and can lead to significant delays in how quickly the browser can process and render our page on the screen:

- The location of the script in the document is significant.
- DOM construction is paused when a script tag is encountered and until the script has finished executing.
- JavaScript can query and modify the DOM and CSSOM.
- JavaScript execution is delayed until the CSSOM is ready.

When we talk about “optimizing the critical rendering path,” to a large degree we’re talking about understanding and optimizing the dependency graph between HTML, CSS, and JavaScript.

In short, JavaScript introduces a lot of new dependencies between the DOM, CSSOM, and JavaScript execution and can lead to significant delays in how quickly the browser can process and render our page on the screen:

- The location of the script in the document is significant.
- DOM construction is paused when a script tag is encountered and until the script has finished executing.
- JavaScript can query and modify the DOM and CSSOM.
- JavaScript execution is delayed until the CSSOM is ready.

When we talk about “optimizing the critical rendering path,” to a large degree we’re talking about understanding and optimizing the dependency graph between HTML, CSS, and JavaScript.

2) inline JS
- always parser blocking
- apparently can add special js code to work around this (script injected js)
- for morden browsers this is a "bad" pattern: defeats pre-load scanner

3) External JS
- browser has to fetch js from remote source (network, disk, etc)
- then wait for CSSOM
- then run
- not optimal wrt CRP

4) async attribute
- applied to script tag for external JS
- means continue to construct DOM and run JS when it arrives

- The async attribute on the script tag provides two critical properties: 
- it tells the browser to not block DOM construction, and 
- it does not block script execution on CSSOM.

- <script src="...">: use when execution order matters	
- <script async src="...">: use when execution order does not matter

5) Pre-load scanner

All modern browsers have a "preload scanner" (yes, even IE8/9 and Android 2.3/2.2) which is invoked when the document parser is blocked and whose sole responsibility is to "peek ahead" in the document and find resources that should be fetched as soon as possible to unblock the critical rendering path.

Also, note that the preload scanner will only discover resources that are specified via src/href attributes on script and link tags. The preload scanner cannot and does not execute inline JavaScript blocks, which means that any script-injected assets cannot be discovered by the preload scanner.

6) inline js before CSS

- if we place inline js before any CSS declarations in the head, then the inline js is executed immediately.

- Wait, should I just move all of my JavaScript above the CSS then? No. You want to keep your <head> lean to allow the browser to discover your CSS and begin parsing the actual page content as soon as possible - i.e. optimize the content you deliver in your first round trip to enable the fastest possible page render
